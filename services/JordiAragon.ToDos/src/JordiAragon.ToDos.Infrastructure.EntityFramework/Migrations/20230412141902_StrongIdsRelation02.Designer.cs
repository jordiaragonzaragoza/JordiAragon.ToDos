// <auto-generated />
using System;
using JordiAragon.ToDos.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JordiAragon.ToDos.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ToDosContext))]
    [Migration("20230412141902_StrongIdsRelation02")]
    partial class StrongIdsRelation02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JordiAragon.SharedKernel.Infrastructure.EntityFramework.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.AccountAggregate.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModificationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.ContributorAggregate.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.ProjectAggregate.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.ProjectAggregate.ToDoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContributorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.ProjectAggregate.Project", b =>
                {
                    b.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.ColorModels.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");

                            b1.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.ColorModels.Intensity", "B", b2 =>
                                {
                                    b2.Property<Guid>("ColorProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Value")
                                        .HasColumnType("int");

                                    b2.HasKey("ColorProjectId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ColorProjectId");
                                });

                            b1.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.ColorModels.Intensity", "G", b2 =>
                                {
                                    b2.Property<Guid>("ColorProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Value")
                                        .HasColumnType("int");

                                    b2.HasKey("ColorProjectId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ColorProjectId");
                                });

                            b1.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.ColorModels.Intensity", "R", b2 =>
                                {
                                    b2.Property<Guid>("ColorProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Value")
                                        .HasColumnType("int");

                                    b2.HasKey("ColorProjectId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ColorProjectId");
                                });

                            b1.Navigation("B");

                            b1.Navigation("G");

                            b1.Navigation("R");
                        });

                    b.Navigation("Color")
                        .IsRequired();
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.ProjectAggregate.ToDoItem", b =>
                {
                    b.HasOne("JordiAragon.ToDos.Domain.ContributorAggregate.Contributor", null)
                        .WithMany()
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("JordiAragon.ToDos.Domain.ProjectAggregate.Project", null)
                        .WithMany("Items")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.Position.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("ToDoItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Locality")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RegionCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ToDoItemId");

                            b1.ToTable("ToDoItems");

                            b1.WithOwner()
                                .HasForeignKey("ToDoItemId");

                            b1.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.Position.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("LocationToDoItemId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("LocationToDoItemId");

                                    b2.ToTable("ToDoItems");

                                    b2.WithOwner()
                                        .HasForeignKey("LocationToDoItemId");

                                    b2.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.Position.Latitude", "Latitude", b3 =>
                                        {
                                            b3.Property<Guid>("CoordinatesLocationToDoItemId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<float>("Value")
                                                .HasColumnType("real");

                                            b3.HasKey("CoordinatesLocationToDoItemId");

                                            b3.ToTable("ToDoItems");

                                            b3.WithOwner()
                                                .HasForeignKey("CoordinatesLocationToDoItemId");
                                        });

                                    b2.OwnsOne("JordiAragon.ToDos.Domain.ProjectAggregate.Position.Longitude", "Longitude", b3 =>
                                        {
                                            b3.Property<Guid>("CoordinatesLocationToDoItemId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<float>("Value")
                                                .HasColumnType("real");

                                            b3.HasKey("CoordinatesLocationToDoItemId");

                                            b3.ToTable("ToDoItems");

                                            b3.WithOwner()
                                                .HasForeignKey("CoordinatesLocationToDoItemId");
                                        });

                                    b2.Navigation("Latitude");

                                    b2.Navigation("Longitude");
                                });

                            b1.Navigation("Coordinates")
                                .IsRequired();
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("JordiAragon.ToDos.Domain.ProjectAggregate.Project", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
